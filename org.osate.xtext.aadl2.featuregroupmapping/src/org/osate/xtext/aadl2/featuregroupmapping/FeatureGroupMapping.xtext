grammar org.osate.xtext.aadl2.featuregroupmapping.FeatureGroupMapping 
//with org.osate.xtext.aadl2.properties.Properties

hidden(WS, SL_COMMENT)

generate featureGroupMapping "http://www.aadl.info/FGM"

// make the AADL2 Meta model accessible
import "platform:/resource/org.osate.aadl2/model/aadl2.ecore" as aadl2
// Makes Ecore accessible, as it is used in the aadl2 Meta model
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Xtext assumes a single grammar root. This rule is not actively interpreted.
// We actually have two separate ones, each identified in the Annex Parser interface
FGMGrammarRoot : 	 'library' fgml=FGMLibrary  
	| fgmsc=FGMSubclause
;

// the root for  AnnexLibrary parsing
FGMLibrary returns FGMLibrary:
	(featuremappingset+=FeatureMappingset)+
;

FeatureMappingset returns FeatureMappingset:
	'mappings' name=ID 
	('extends' mappingset=[FeatureMappingset|QFGTMREF])?
	mapping+= FeatureMapping
	'end' 'mappings' ';';
	 
FGMSubclause returns FGMSubclause:
	'use' 'mappings' mappingset=[FeatureMappingset|QFGTMREF] ';';


AnnexLibrary returns aadl2::AnnexLibrary:
	 FGMLibrary 
	 ;

AnnexSubclause returns aadl2::AnnexSubclause:
	 FGMSubclause 
	 ;
// FGMLibrary is a named element that can be referenced by others	 
NamedElement returns aadl2::NamedElement:
	FeatureMappingset
; 

// all the other FGM elements must be a subclass of (aadl2) Element
Element returns aadl2::Element:
FeatureMapping | FeaturePath | FeatureReference ; 

	
FeatureMapping returns FeatureMapping:
	left = FeaturePath '<=>' right =FeaturePath ';';

FeaturePath returns FeaturePath:
	(featureGroupType=[aadl2::FeatureGroupType|QFGTMREF] '.')
	(featureReference+=FeatureReference)+
;

FeatureReference returns FeatureReference:
	feature=[aadl2::Feature|ID]
;
	
terminal SL_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;

terminal ID:	('a'..'z'
        |'A'..'Z'
        ) ( ('_')? ('a'..'z'
        |'A'..'Z'
        |'0'..'9'))*;

QFGTMREF:
	 (ID '::')* ID ;


terminal WS			: (' '|'\t'|'\r'|'\n')+;

	
	