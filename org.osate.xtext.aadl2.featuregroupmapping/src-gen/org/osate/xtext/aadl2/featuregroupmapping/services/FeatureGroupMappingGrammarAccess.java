/*
* generated by Xtext
*/

package org.osate.xtext.aadl2.featuregroupmapping.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class FeatureGroupMappingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FGMGrammarRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FGMGrammarRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLibraryKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFgmlAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFgmlFGMLibraryParserRuleCall_0_1_0 = (RuleCall)cFgmlAssignment_0_1.eContents().get(0);
		private final Assignment cFgmscAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFgmscFGMSubclauseParserRuleCall_1_0 = (RuleCall)cFgmscAssignment_1.eContents().get(0);
		
		//// Xtext assumes a single grammar root. This rule is not actively interpreted.
		//
		//// We actually have two separate ones, each identified in the Annex Parser interface
		//
		//FGMGrammarRoot:
		//
		//	"library" fgml=FGMLibrary | fgmsc=FGMSubclause;
		public ParserRule getRule() { return rule; }

		//"library" fgml=FGMLibrary | fgmsc=FGMSubclause
		public Alternatives getAlternatives() { return cAlternatives; }

		//"library" fgml=FGMLibrary
		public Group getGroup_0() { return cGroup_0; }

		//"library"
		public Keyword getLibraryKeyword_0_0() { return cLibraryKeyword_0_0; }

		//fgml=FGMLibrary
		public Assignment getFgmlAssignment_0_1() { return cFgmlAssignment_0_1; }

		//FGMLibrary
		public RuleCall getFgmlFGMLibraryParserRuleCall_0_1_0() { return cFgmlFGMLibraryParserRuleCall_0_1_0; }

		//fgmsc=FGMSubclause
		public Assignment getFgmscAssignment_1() { return cFgmscAssignment_1; }

		//FGMSubclause
		public RuleCall getFgmscFGMSubclauseParserRuleCall_1_0() { return cFgmscFGMSubclauseParserRuleCall_1_0; }
	}

	public class FGMLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FGMLibrary");
		private final Assignment cFgtmappingsetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFgtmappingsetFGTMappingsetParserRuleCall_0 = (RuleCall)cFgtmappingsetAssignment.eContents().get(0);
		
		//// the root for  AnnexLibrary parsing
		//
		//FGMLibrary:
		//
		//	fgtmappingset+=FGTMappingset+;
		public ParserRule getRule() { return rule; }

		//fgtmappingset+=FGTMappingset+
		public Assignment getFgtmappingsetAssignment() { return cFgtmappingsetAssignment; }

		//FGTMappingset
		public RuleCall getFgtmappingsetFGTMappingsetParserRuleCall_0() { return cFgtmappingsetFGTMappingsetParserRuleCall_0; }
	}

	public class FGTMappingsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FGTMappingset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMappingsetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cMappingsetFGTMappingsetCrossReference_2_1_0 = (CrossReference)cMappingsetAssignment_2_1.eContents().get(0);
		private final RuleCall cMappingsetFGTMappingsetQFGTMREFParserRuleCall_2_1_0_1 = (RuleCall)cMappingsetFGTMappingsetCrossReference_2_1_0.eContents().get(1);
		private final Assignment cMappingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMappingFGMMappingParserRuleCall_3_0 = (RuleCall)cMappingAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cMappingsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FGTMappingset:
		//
		//	"mappings" name=ID ("extends" mappingset=[FGTMappingset|QFGTMREF])? mapping+=FGMMapping "end" "mappings" ";";
		public ParserRule getRule() { return rule; }

		//"mappings" name=ID ("extends" mappingset=[FGTMappingset|QFGTMREF])? mapping+=FGMMapping "end" "mappings" ";"
		public Group getGroup() { return cGroup; }

		//"mappings"
		public Keyword getMappingsKeyword_0() { return cMappingsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" mappingset=[FGTMappingset|QFGTMREF])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//mappingset=[FGTMappingset|QFGTMREF]
		public Assignment getMappingsetAssignment_2_1() { return cMappingsetAssignment_2_1; }

		//[FGTMappingset|QFGTMREF]
		public CrossReference getMappingsetFGTMappingsetCrossReference_2_1_0() { return cMappingsetFGTMappingsetCrossReference_2_1_0; }

		//QFGTMREF
		public RuleCall getMappingsetFGTMappingsetQFGTMREFParserRuleCall_2_1_0_1() { return cMappingsetFGTMappingsetQFGTMREFParserRuleCall_2_1_0_1; }

		//mapping+=FGMMapping
		public Assignment getMappingAssignment_3() { return cMappingAssignment_3; }

		//FGMMapping
		public RuleCall getMappingFGMMappingParserRuleCall_3_0() { return cMappingFGMMappingParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"mappings"
		public Keyword getMappingsKeyword_5() { return cMappingsKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class FGMSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FGMSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMappingsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMappingsetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMappingsetFGTMappingsetCrossReference_2_0 = (CrossReference)cMappingsetAssignment_2.eContents().get(0);
		private final RuleCall cMappingsetFGTMappingsetQFGTMREFParserRuleCall_2_0_1 = (RuleCall)cMappingsetFGTMappingsetCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FGMSubclause:
		//
		//	"use" "mappings" mappingset=[FGTMappingset|QFGTMREF] ";";
		public ParserRule getRule() { return rule; }

		//"use" "mappings" mappingset=[FGTMappingset|QFGTMREF] ";"
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//"mappings"
		public Keyword getMappingsKeyword_1() { return cMappingsKeyword_1; }

		//mappingset=[FGTMappingset|QFGTMREF]
		public Assignment getMappingsetAssignment_2() { return cMappingsetAssignment_2; }

		//[FGTMappingset|QFGTMREF]
		public CrossReference getMappingsetFGTMappingsetCrossReference_2_0() { return cMappingsetFGTMappingsetCrossReference_2_0; }

		//QFGTMREF
		public RuleCall getMappingsetFGTMappingsetQFGTMREFParserRuleCall_2_0_1() { return cMappingsetFGTMappingsetQFGTMREFParserRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cFGMLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//
		//	FGMLibrary;
		public ParserRule getRule() { return rule; }

		//FGMLibrary
		public RuleCall getFGMLibraryParserRuleCall() { return cFGMLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cFGMSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//
		//	FGMSubclause;
		public ParserRule getRule() { return rule; }

		//FGMSubclause
		public RuleCall getFGMSubclauseParserRuleCall() { return cFGMSubclauseParserRuleCall; }
	}

	public class NamedELementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedELement");
		private final RuleCall cFGTMappingsetParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// FGMLibrary is a named element that can be referenced by others	 
		//
		//NamedELement returns aadl2::NamedElement:
		//
		//	FGTMappingset;
		public ParserRule getRule() { return rule; }

		//FGTMappingset
		public RuleCall getFGTMappingsetParserRuleCall() { return cFGTMappingsetParserRuleCall; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFGMMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeaturePathParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// all the other FGM elements must be a subclass of (aadl2) Element
		//
		//Element returns aadl2::Element:
		//
		//	FGMMapping | FeaturePath | FeatureReference;
		public ParserRule getRule() { return rule; }

		//FGMMapping | FeaturePath | FeatureReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//FGMMapping
		public RuleCall getFGMMappingParserRuleCall_0() { return cFGMMappingParserRuleCall_0; }

		//FeaturePath
		public RuleCall getFeaturePathParserRuleCall_1() { return cFeaturePathParserRuleCall_1; }

		//FeatureReference
		public RuleCall getFeatureReferenceParserRuleCall_2() { return cFeatureReferenceParserRuleCall_2; }
	}

	public class FGMMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FGMMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftFeaturePathParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightFeaturePathParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FGMMapping:
		//
		//	left=FeaturePath "<=>" right=FeaturePath ";";
		public ParserRule getRule() { return rule; }

		//left=FeaturePath "<=>" right=FeaturePath ";"
		public Group getGroup() { return cGroup; }

		//left=FeaturePath
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//FeaturePath
		public RuleCall getLeftFeaturePathParserRuleCall_0_0() { return cLeftFeaturePathParserRuleCall_0_0; }

		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1; }

		//right=FeaturePath
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//FeaturePath
		public RuleCall getRightFeaturePathParserRuleCall_2_0() { return cRightFeaturePathParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FeaturePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeaturePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFeatureGroupTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cFeatureGroupTypeFeatureGroupTypeCrossReference_0_0_0 = (CrossReference)cFeatureGroupTypeAssignment_0_0.eContents().get(0);
		private final RuleCall cFeatureGroupTypeFeatureGroupTypeIDTerminalRuleCall_0_0_0_1 = (RuleCall)cFeatureGroupTypeFeatureGroupTypeCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFeatureReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureReferenceFeatureReferenceParserRuleCall_1_0 = (RuleCall)cFeatureReferenceAssignment_1.eContents().get(0);
		
		//FeaturePath:
		//
		//	(featureGroupType=[aadl2::FeatureGroupType] ".") featureReference+=FeatureReference+;
		public ParserRule getRule() { return rule; }

		//(featureGroupType=[aadl2::FeatureGroupType] ".") featureReference+=FeatureReference+
		public Group getGroup() { return cGroup; }

		//featureGroupType=[aadl2::FeatureGroupType] "."
		public Group getGroup_0() { return cGroup_0; }

		//featureGroupType=[aadl2::FeatureGroupType]
		public Assignment getFeatureGroupTypeAssignment_0_0() { return cFeatureGroupTypeAssignment_0_0; }

		//[aadl2::FeatureGroupType]
		public CrossReference getFeatureGroupTypeFeatureGroupTypeCrossReference_0_0_0() { return cFeatureGroupTypeFeatureGroupTypeCrossReference_0_0_0; }

		//ID
		public RuleCall getFeatureGroupTypeFeatureGroupTypeIDTerminalRuleCall_0_0_0_1() { return cFeatureGroupTypeFeatureGroupTypeIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//featureReference+=FeatureReference+
		public Assignment getFeatureReferenceAssignment_1() { return cFeatureReferenceAssignment_1; }

		//FeatureReference
		public RuleCall getFeatureReferenceFeatureReferenceParserRuleCall_1_0() { return cFeatureReferenceFeatureReferenceParserRuleCall_1_0; }
	}

	public class FeatureReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureReference");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureFeatureCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_0_1 = (RuleCall)cFeatureFeatureCrossReference_0.eContents().get(1);
		
		//FeatureReference:
		//
		//	feature=[aadl2::Feature];
		public ParserRule getRule() { return rule; }

		//feature=[aadl2::Feature]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }

		//[aadl2::Feature]
		public CrossReference getFeatureFeatureCrossReference_0() { return cFeatureFeatureCrossReference_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_0_1() { return cFeatureFeatureIDTerminalRuleCall_0_1; }
	}

	public class QFGTMREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QFGTMREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QFGTMREF:
		//
		//	(ID "::")* ID;
		public ParserRule getRule() { return rule; }

		//(ID "::")* ID
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private FGMGrammarRootElements pFGMGrammarRoot;
	private FGMLibraryElements pFGMLibrary;
	private FGTMappingsetElements pFGTMappingset;
	private FGMSubclauseElements pFGMSubclause;
	private AnnexLibraryElements pAnnexLibrary;
	private AnnexSubclauseElements pAnnexSubclause;
	private NamedELementElements pNamedELement;
	private ElementElements pElement;
	private FGMMappingElements pFGMMapping;
	private FeaturePathElements pFeaturePath;
	private FeatureReferenceElements pFeatureReference;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tID;
	private QFGTMREFElements pQFGTMREF;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public FeatureGroupMappingGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.aadl2.featuregroupmapping.FeatureGroupMapping".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// Xtext assumes a single grammar root. This rule is not actively interpreted.
	//
	//// We actually have two separate ones, each identified in the Annex Parser interface
	//
	//FGMGrammarRoot:
	//
	//	"library" fgml=FGMLibrary | fgmsc=FGMSubclause;
	public FGMGrammarRootElements getFGMGrammarRootAccess() {
		return (pFGMGrammarRoot != null) ? pFGMGrammarRoot : (pFGMGrammarRoot = new FGMGrammarRootElements());
	}
	
	public ParserRule getFGMGrammarRootRule() {
		return getFGMGrammarRootAccess().getRule();
	}

	//// the root for  AnnexLibrary parsing
	//
	//FGMLibrary:
	//
	//	fgtmappingset+=FGTMappingset+;
	public FGMLibraryElements getFGMLibraryAccess() {
		return (pFGMLibrary != null) ? pFGMLibrary : (pFGMLibrary = new FGMLibraryElements());
	}
	
	public ParserRule getFGMLibraryRule() {
		return getFGMLibraryAccess().getRule();
	}

	//FGTMappingset:
	//
	//	"mappings" name=ID ("extends" mappingset=[FGTMappingset|QFGTMREF])? mapping+=FGMMapping "end" "mappings" ";";
	public FGTMappingsetElements getFGTMappingsetAccess() {
		return (pFGTMappingset != null) ? pFGTMappingset : (pFGTMappingset = new FGTMappingsetElements());
	}
	
	public ParserRule getFGTMappingsetRule() {
		return getFGTMappingsetAccess().getRule();
	}

	//FGMSubclause:
	//
	//	"use" "mappings" mappingset=[FGTMappingset|QFGTMREF] ";";
	public FGMSubclauseElements getFGMSubclauseAccess() {
		return (pFGMSubclause != null) ? pFGMSubclause : (pFGMSubclause = new FGMSubclauseElements());
	}
	
	public ParserRule getFGMSubclauseRule() {
		return getFGMSubclauseAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//
	//	FGMLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return (pAnnexLibrary != null) ? pAnnexLibrary : (pAnnexLibrary = new AnnexLibraryElements());
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//
	//	FGMSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return (pAnnexSubclause != null) ? pAnnexSubclause : (pAnnexSubclause = new AnnexSubclauseElements());
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//// FGMLibrary is a named element that can be referenced by others	 
	//
	//NamedELement returns aadl2::NamedElement:
	//
	//	FGTMappingset;
	public NamedELementElements getNamedELementAccess() {
		return (pNamedELement != null) ? pNamedELement : (pNamedELement = new NamedELementElements());
	}
	
	public ParserRule getNamedELementRule() {
		return getNamedELementAccess().getRule();
	}

	//// all the other FGM elements must be a subclass of (aadl2) Element
	//
	//Element returns aadl2::Element:
	//
	//	FGMMapping | FeaturePath | FeatureReference;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//FGMMapping:
	//
	//	left=FeaturePath "<=>" right=FeaturePath ";";
	public FGMMappingElements getFGMMappingAccess() {
		return (pFGMMapping != null) ? pFGMMapping : (pFGMMapping = new FGMMappingElements());
	}
	
	public ParserRule getFGMMappingRule() {
		return getFGMMappingAccess().getRule();
	}

	//FeaturePath:
	//
	//	(featureGroupType=[aadl2::FeatureGroupType] ".") featureReference+=FeatureReference+;
	public FeaturePathElements getFeaturePathAccess() {
		return (pFeaturePath != null) ? pFeaturePath : (pFeaturePath = new FeaturePathElements());
	}
	
	public ParserRule getFeaturePathRule() {
		return getFeaturePathAccess().getRule();
	}

	//FeatureReference:
	//
	//	feature=[aadl2::Feature];
	public FeatureReferenceElements getFeatureReferenceAccess() {
		return (pFeatureReference != null) ? pFeatureReference : (pFeatureReference = new FeatureReferenceElements());
	}
	
	public ParserRule getFeatureReferenceRule() {
		return getFeatureReferenceAccess().getRule();
	}

	//terminal SL_COMMENT:
	//
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//QFGTMREF:
	//
	//	(ID "::")* ID;
	public QFGTMREFElements getQFGTMREFAccess() {
		return (pQFGTMREF != null) ? pQFGTMREF : (pQFGTMREF = new QFGTMREFElements());
	}
	
	public ParserRule getQFGTMREFRule() {
		return getQFGTMREFAccess().getRule();
	}

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
